{"name":"Drupal-emacs","tagline":"compilation of php-mode drupal-mode and simple projectmanagement, using directory variables","body":"drupal-emacs\r\n============\r\n\r\ncompilation of php-mode drupal-mode and simple project management, using directory variables\r\n\r\nGetting started\r\n===============\r\nWhen you clone this project remember to run:\r\n\r\ngit submodule update --init\r\n\r\nOnce you have retrieved the project copy or soft link init.el into ~/.emacs.d/\r\n\r\nAnd add the elisp folder and the php-mode folder inside that to the load-path\r\n\r\n(add-to-list 'load-path \"<PATH TO DRUPAL-EMACS>/elisp\")\r\n\r\n(add-to-list 'load-path \"<PATH TO DRUPAL-EMACS>/elisp/php-mode\")\r\n\r\nto the beginning of init.el\r\n\r\nHow to\r\n======\r\ncreate a file called .dir-locals.el in the directory that you wish to be the root of your project at give it the following content\r\n\r\n((nil . ((eval . (setq project-root-dir (locate-dominating-file buffer-file-name \".dir-locals.el\"))))))\r\n\r\nThis will make emacs create a TAGS file in that directory and update it each time you save a file\r\n\r\nQuirks\r\n======\r\nc-subword-mode migt be void when the drupal-mode is loaded, this is coursed by an obsolite elc file(compiled emacs elisp file), most likely delivered by your GNU/Linux/*nix distribution.\r\n\r\nYou can test this by adding the following some where in init.el\r\n \r\n    (add-hook 'php-mode-hook '(lambda ()(c-subword-mode t)))\r\n\r\nIf when you open a php file and the mini buffer says:\r\n\r\nFile mode specification error: (void-function c-subword-mode)\r\n\r\nThen you need to update the cc-mode of your emacs.\r\n\r\nHowto\r\n-----\r\nBecome root\r\n\r\nChange directory to /user/share\r\n\r\nAnd call:\r\n\r\n    find . -name \"*cc-*.elc\" -exec mv {} {}.old \\;\r\n\r\nThen download cc-mode from http://cc-mode.sourceforge.net/release.php\r\n\r\nand extract it in the emacs lisp folder\r\n\r\nTo find that folder one option is to call\r\n\r\n    find . -name \"*cc-*.elc\" (in /usr/share or /)\r\n\r\n\r\nExtra features\r\n==============\r\n\r\nMySQL screen client\r\n-------------------\r\nThe sh folder contains a MySQL pager script, which makes it possible to use gnu screen as a MySQL result browser.\r\n\r\nHow to\r\n------\r\nCopy or soft link my-screen-pager into path\r\n\r\nstart screen\r\n\r\n    $ screen\r\n\r\nsplit window\r\n\r\n    C-a S\r\n\r\nchange window\r\n\r\n    C-a <TAB>\r\n\r\ncreate a new window\r\n\r\n    C-a c\r\n\r\nstart a new screen session in this window\r\n\r\n    $ screen -m\r\n\r\nget and copy the session id\r\n\r\n    $echo $STY\r\n\r\nswitch window\r\n\r\n    C-a <TAB>\r\n\r\nstart mysql\r\n\r\n    $mysql -u....\r\n\r\nload script\r\n\r\n    pager my-screen-pager <COPIED SESSION ID>\r\n\r\nNow the bottom half of the window acts as a result browser, where you can search in the result and switch between the current a previous results.\r\n\r\nThe wrapper script pipes the result through less. So all the features of less are available in the result window.\r\nThe script uses a temp file for piping to less. The name of this file is echoed back to Mysql, and can be used to process the result in grep or anything else you please.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}